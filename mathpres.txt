#+OPTIONS: toc:nil num:nil author:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+REVEAL_MARGIN: 0.2
#+REVEAL_TRANS: slide
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/

#+TITLE: Trigonometry Practice Game
#+DATE: www.theolsens.ca/aaron

* Initialize variables
#+BEGIN_SRC js
var scaleFactor = 30;   //how much the lines are scaled up by, answers are unaffected
var initX = 50;         //initial X offset to center triangle on canvas
var initY = 300;        //initial Y offset to center triangle on canvas

var angleA = 0;     //Angles to be randomly generated
var angleB = 0;
var angleC = 0;

var lineA = 0;      //lines to be exrapolated from angles
var lineB = 0;
var lineC = 0;

var ansA = 0;       //final answers to display and compare to user answers
var ansB = 0;
var ansC = 0;

var Aon = 0;        //indicators of which angle is displaying at the moment
var Bon = 0;
var Con = 0;

var userAns = 0;    //the user's answer

var checkAns = 0;   //the correct answer

var wrong = 0;      //if they've been wrong that turn, don't give them points

var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
#+END_SRC
* Make triangle parameters
#+BEGIN_SRC js
function newQuestion () {
    do {
        angleA = getRand(70);
        angleB = getRand(70);
        angleC = 180 - angleB - angleA; //SATT

        if (angleC > 90) {
        //If angleC is above 90, make it a right-angled triangle and recalculate
            angleC = 90;
            angleB = getRand(20) + 50;
            angleA = 180 - angleC - angleB;
        }
        calcLines();
    } while (lineB > 250); //If it's too big to fit, draw it again
}
#+END_SRC
** 
#+BEGIN_SRC js
function calcLines () {
    lineA = getRand(5) + 2; //generate a random line length
    lineB = Math.sin(dtr(angleB))*lineA/Math.sin(dtr(angleA)); //sin law
    lineC = Math.sin(dtr(angleC))*lineA/Math.sin(dtr(angleA)); //sin law
    //Make the lines bigger on the screen, while keeping the triangle in proportion
    lineA = lineA * scaleFactor;
    lineB = lineB * scaleFactor;
    lineC = lineC * scaleFactor;
//Round lengths to compare to user answer
    ansA = Math.round(lineA / (scaleFactor / 10));
    ansB = Math.round(lineB / (scaleFactor / 10));
    ansC = Math.round(lineC / (scaleFactor / 10));
}
#+END_SRC
* Draw the triangle
#+BEGIN_SRC js
function drawTriangle () {
    newQuestion(); //Generate the triangle measurements
    ctx.clearRect(0, 0, canvas.width, canvas.height); //clear the screen so the triangles don't overlap
//Everything here has to be done in coordinates
    ctx.beginPath();
    ctx.moveTo(initX + lineA, initY);
    ctx.lineTo(initX, initY);
    ctx.lineTo(initX + lineB * Math.cos(dtr(angleC)), initY - lineB * Math.sin(dtr(angleC)));
    ctx.closePath();
    ctx.stroke();
    ctx.font="50px Verdana";
    if (pointCounter < 10) { //draw points
        ctx.fillText(pointCounter, 280, 50);
        ctx.font="25px Verdana";
        ctx.fillText("Score:", 190, 50);
    } else {
        ctx.fillText(pointCounter, 250, 50);
        ctx.font="25px Verdana";
        ctx.fillText("Score:", 160, 50);
    }
    drawMarks(); //draw the angle and line mearures
}
#+END_SRC
** Convert degrees to radians
#+BEGIN_SRC js
function dtr (degree) { //degrees to radians
    var pi = Math.PI;
    return degree * (pi/180);
}
#+END_SRC
** 
#+BEGIN_SRC js
function drawAngles (amount) {
    if (amount == 2) {
        var chooser = getRand(3);
        if (chooser == 1) {
            drawAngleA();
            Aon = 1;
            drawAngleB();
            Bon = 1;
            Con = 0;
        } else if (chooser == 2) {
            Aon = 0;
            drawAngleB();
            Bon = 1;
            drawAngleC();
            Con = 1;
        } else {
            drawAngleA();
            Aon = 1;
            Bon = 0;
            drawAngleC();
            Con = 1;
        }
    }
#+END_SRC
**  
#+BEGIN_SRC js
else if (amount == 1) {
        chooser = getRand(3);
        if (chooser == 1) {
            drawAngleA();
            Aon = 1;
            Bon = 0;
            Con = 0;
        } else if (chooser == 2) {
            Aon = 0;
            drawAngleB();
            Bon = 1;
            Con = 1;
        } else {
            Aon = 0;
            Bon = 0;
            drawAngleC();
            Con = 1;
        }
    }
}
#+END_SRC
** 
#+BEGIN_SRC js
function drawMarks () {
    var decideType = getRand(2); //if 1, cos law. If 2, sin law

    drawAngles(decideType);
    if (decideType == 1) {
        if (Aon == 1) {
            display('a'); //Ask for a
            drawLineB();
            drawLineC();
        } else if (Bon == 1) {
            display('b'); //Ask for b
            drawLineC();
            drawLineA();
       } else if (Con == 1) {
            display('c'); //Ask for c
            drawLineB();
            drawLineA();
        }
    } else {
        if (Aon == 1 && Bon == 1) {
            drawLineA();
            display('b');
        } else if (Bon == 1 && Con == 1) {
            drawLineB();
            display('c');
        } else if (Con == 1 && Aon == 1) {
            drawLineC();
            display('a');
        }
    }
}
#+END_SRC
* Draw angle measurements
#+BEGIN_SRC js
function drawAngleA () {
    ctx.font="15px Verdana";
    ctx.fillText(angleA + '°', initX + lineB * Math.cos(dtr(angleC)),
                          initY - lineB * Math.sin(dtr(angleC)) - 5);
}

function drawAngleB () {
    ctx.font="15px Verdana";
    ctx.fillText(angleB + '°', initX + lineA + 5, initY);
}

function drawAngleC () {
//if it's 90, draw the indicator symbol
//otherwise, draw the angle measurement in degrees
    if (angleC != 90) {
        ctx.font="15px Verdana";
        ctx.fillText(angleC + '°', initX - 30, initY);
    } else {
        ctx.beginPath();
        ctx.moveTo(initX, initY - 10);
        ctx.lineTo(initX + 10, initY - 10);
        ctx.lineTo(initX + 10, initY);
        ctx.stroke();
    }
    //  document.getElementById('debug').innerHTML = ansA + ' ' + ansB + ' ' + ansC;
}
#+END_SRC
* Draw line measurements
#+BEGIN_SRC js
function drawLineA () {
    ctx.font="20px Verdana";
    ctx.fillText(ansA, initX + lineA / 2 - 15, initY + 20);
}

function drawLineB () {
    ctx.font="20px Verdana";
    ctx.fillText(ansB, initX - 30 + (lineB * Math.cos(dtr(angleC)))/2,
                           initY - (lineB * Math.sin(dtr(angleC)))/2);
}

function drawLineC () {
    ctx.font="20px Verdana";
    ctx.fillText(ansC, initX + (lineB * Math.cos(dtr(angleC))) +
  (((initX + lineA) - (initX + lineB * Math.cos(dtr(angleC)))) / 2) + 5,
                             initY - (lineB * Math.sin(dtr(angleC)))/2);
}
#+END_SRC

* Question to ask:
#+BEGIN_SRC js
function display (string) {  //ask user for the answer
    if (string == 'a') {
        drawLineA();
        checkAns = ansA;
    }
    if (string == 'b') {
        drawLineB();
        checkAns = ansB;
    }
    if (string == 'c') {
        drawLineC();
        checkAns = ansC;
    }
    document.getElementById('question').innerHTML = "Find the side length of " + string;
}
#+END_SRC
* Check if their answer is right
#+BEGIN_SRC js
function checkAnswer () {
    userAns = parseInt(document.getElementById('answer').value);
    if (userAns == checkAns) {
        alert("You are right!");
        if (wrong != 1) {
            pointCounter += 1;
	          localStorage.setItem('pointCounter', pointCounter); //update points and save
            drawTriangle();
        } else {
            drawTriangle();
            wrong = 0;
        }
    } else {
        alert("You were wrong, try again");
        wrong = 1; //don't give them points when they got it wrong, but let them keep trying
    }
    document.getElementById('answer').value = "";
    document.getElementById('answer').blur();
}
#+END_SRC
* Layout
#+BEGIN_SRC html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1 maximum-scale=1, user-scalable=0">
    <link rel="stylesheet" href="http://www.w3schools.com/lib/w3.css">
    <title>Aaron's game</title>
    <style>
        * { padding: 0; margin: 0; }
        canvas { width: 140%; height: 45%; background:transparent; display: block; margin: 0 auto; }
    </style>
</head>
<body>

<canvas id="canvas" width="500" height="350"></canvas>

<div>
    <p id="question"></p>
    <p>(to the nearest whole number)</p>
    <button style="width:50%; height:40px" onclick="checkAnswer()">Check Answer</button>
    <button style="width:50%; height:40px; float: right;" onclick="drawTriangle()">New Triangle</button>
</div>


<input style="width:100%; height:60px; position:absolute; bottom:0; left:0;" id="answer" type="text"
       inputmode="numeric" pattern="[0-9]*" placeholder="Your answer here"
       onkeypress="Javascript: if (event.keyCode == 13 || event.keyCode == 9)
                   {event.preventDefault(); checkAnswer();}"/>

<script src="math.js"></script>

</body>
</html>
#+END_SRC
* Licensed under the GNU GPL 3.0
Anybody has the right to run, study, modify, and redistribute the software

Source code available at: [[https://github.com/oujunhao/triangle-game][github.com/oujunhao/triangle-game]]
