<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Trigonometry Practice Game</title>
<meta name="author" content="(Aaron Olsen)"/>
<style type="text/css">
.underline { text-decoration: underline; }
</style>
<link rel="stylesheet" href="http://cdn.jsdelivr.net/reveal.js/3.0.0/css/reveal.css"/>

<link rel="stylesheet" href="http://cdn.jsdelivr.net/reveal.js/3.0.0/css/theme/moon.css" id="theme"/>


<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
    if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = 'http://cdn.jsdelivr.net/reveal.js/3.0.0/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    }
</script>
</head>
<body>
<div class="reveal">
<div class="slides">
<section id="sec-title-slide"><h1 class="title">Trigonometry Practice Game</h1><h2 class="author">Aaron Olsen</h2><h2 class="date">Stratford Central Secondary School</h2><p class="date">Created: 2017-01-10 Tue 15:22</p>
</section>
<div class="org-src-container">

<pre  class="src src-js"><span style="color: #859900;">if</span> <span style="color: #839496;">(</span> localStorage.getItem<span style="color: #2aa198;">(</span><span style="color: #2aa198;">'pointCounter'</span><span style="color: #2aa198;">)</span> <span style="color: #839496;">)</span> <span style="color: #839496;">{</span>
    <span style="color: #859900;">var</span> <span style="color: #6c71c4;">pointCounter</span> = localStorage.getItem<span style="color: #2aa198;">(</span><span style="color: #2aa198;">'pointCounter'</span><span style="color: #2aa198;">)</span>; 
<span style="color: #839496;">}</span> <span style="color: #859900;">else</span> <span style="color: #839496;">{</span>
    <span style="color: #859900;">var</span> <span style="color: #6c71c4;">pointCounter</span> = <span style="color: #268bd2;">0</span>;    <span style="color: #586e75; font-style: italic;">//</span><span style="color: #586e75; font-style: italic;">Grab point from local storage if there is any, otherwise initialize variable</span>
<span style="color: #839496;">}</span>
</pre>
</div>

<p>
var scaleFactor = 30;   //how much the lines are scaled up by, answers are unaffected
var initX = 50;         //initial X offset to center triangle on canvas
var initY = 300;        //initial Y offset to center triangle on canvas
</p>

<p>
var angleA = 0;     //Angles to be randomly generated
var angleB = 0;
var angleC = 0;
</p>

<p>
var lineA = 0;      //lines to be exrapolated from angles
var lineB = 0;
var lineC = 0;
</p>

<p>
var ansA = 0;       //final answers to display and compare to user answers
var ansB = 0;
var ansC = 0;
</p>

<p>
var Aon = 0;        //indicators of which angle is displaying at the moment
var Bon = 0;
var Con = 0;
</p>

<p>
var userAns = 0;    //the user's answer
</p>

<p>
var checkAns = 0;   //the correct answer
</p>

<p>
var wrong = 0;      //if they've been wrong that turn, don't give them points
</p>

<p>
var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
</p>

<p>
function display (string) {  //ask user for the answer
    if (string == 'a') {
        drawA();
        checkAns = ansA;
    }
    if (string == 'b') {
        drawB();
        checkAns = ansB;
    }
    if (string == 'c') {
        drawC();
        checkAns = ansC;
    }
    document.getElementById('question').innerHTML = "Find the side length of " + string; //only for debugging + "  (" + checkAns + ')';
}
</p>

<p>
function dtr (degree) { //degrees to radians
    var pi = Math.PI;
    return degree * (pi/180);
}
</p>

<p>
function getRand (highest) {
    var calcnum = Math.floor(Math.random() * highest + 1);
    return calcnum;
}
</p>

<p>
function newQuestion () {
    do {
        angleA = getRand(70);
        angleB = getRand(70);
        angleC = 180 - angleB - angleA;
</p>

<p>
    if (angleC &gt; 90) {
        angleC = 90;
        angleB = getRand(20) + 50;
        angleA = 180 - angleC - angleB;
    }
    calcLines();
} while (lineB &gt; 250);
}
</p>

<p>
function calcLines () {
    lineA = getRand(5) + 2;
    lineB = Math.sin(dtr(angleB))*lineA/Math.sin(dtr(angleA));
    lineC = Math.sin(dtr(angleC))*lineA/Math.sin(dtr(angleA));
    lineA = lineA * scaleFactor;
    lineB = lineB * scaleFactor;
    lineC = lineC * scaleFactor;
    ansA = Math.round(lineA / (scaleFactor / 10));
    ansB = Math.round(lineB / (scaleFactor / 10));
    ansC = Math.round(lineC / (scaleFactor / 10));
}
</p>

<p>
function drawTriangle () {
    newQuestion();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    ctx.moveTo(initX + lineA, initY);
    ctx.lineTo(initX, initY);
    ctx.lineTo(initX + lineB * Math.cos(dtr(angleC)), initY - lineB * Math.sin(dtr(angleC)));
    ctx.closePath();
    ctx.stroke();
    ctx.font="50px Verdana";
    if (pointCounter &lt; 10) {
        ctx.fillText(pointCounter, 280, 50);
        ctx.font="25px Verdana";
        ctx.fillText("Score:", 190, 50);
    } else {
        ctx.fillText(pointCounter, 250, 50);
        ctx.font="25px Verdana";
        ctx.fillText("Score:", 160, 50);
    }
    drawMarks();
}
</p>

<p>
function drawMarks () {
    var decideType = getRand(2);
    var decideWhat = getRand(3);
</p>

<p>
drawAngles(decideType);
if (decideType <code>= 1) {
        if (Aon =</code> 1) {
        display('a');
        drawLineB();
        drawLineC();
    } else if (Bon == 1) {
        display('b');
        drawLineC();
        drawLineA();
    } else if (Con == 1) {
        display('c');
        drawLineB();
        drawLineA();
    }
} else {
    if (Aon <code>= 1 &amp;&amp; Bon =</code> 1) {
        drawLineA();
        display('b');
    } else if (Bon <code>= 1 &amp;&amp; Con =</code> 1) {
        drawLineB();
        display('c');
    } else if (Con <code>= 1 &amp;&amp; Aon =</code> 1) {
        drawLineC();
        display('a');
    }
}
}
</p>

<p>
function drawAngles (amount) {
    if (amount == 2) {
        var chooser = getRand(3);
        if (chooser == 1) {
            drawAngleA();
            Aon = 1;
            drawAngleB();
            Bon = 1;
            Con = 0;
        } else if (chooser == 2) {
            Aon = 0;
            drawAngleB();
            Bon = 1;
            drawAngleC();
            Con = 1;
        } else {
            Bon = 0;
            drawAngleC();
            Con = 1;
            drawAngleA();
            Aon = 1;
        }
    } else if (amount == 1) {
        chooser = getRand(3);
        if (chooser == 1) {
            drawAngleA();
            Aon = 1;
            Bon = 0;
            Con = 0;
        } else if (chooser == 2) {
            Aon = 0;
            drawAngleB();
            Bon = 1;
            Con = 1;
        } else {
            Aon = 0;
            Bon = 0;
            drawAngleC();
            Con = 1;
        }
    }
}
</p>

<p>
function drawAngleA () {
    ctx.font="15px Verdana";
    ctx.fillText(angleA + '°', initX + lineB * Math.cos(dtr(angleC)), initY - lineB * Math.sin(dtr(angleC)) - 5);
}
</p>

<p>
function drawAngleB () {
    ctx.font="15px Verdana";
    ctx.fillText(angleB + '°', initX + lineA + 5, initY);
}
</p>

<p>
function drawAngleC () {
    if (angleC != 90) {
        ctx.font="15px Verdana";
        ctx.fillText(angleC + '°', initX - 30, initY);
    } else {
        ctx.beginPath();
        ctx.moveTo(initX, initY - 10);
        ctx.lineTo(initX + 10, initY - 10);
        ctx.lineTo(initX + 10, initY);
        ctx.stroke();
    }
    //  document.getElementById('debug').innerHTML = ansA + ' ' + ansB + ' ' + ansC;
}
</p>

<p>
function drawLineA () {
    ctx.font="20px Verdana";
    ctx.fillText(ansA, initX + lineA / 2 - 15, initY + 20);
}
</p>

<p>
function drawLineB () {
    ctx.font="20px Verdana";
    ctx.fillText(ansB, initX - 30 + (lineB * Math.cos(dtr(angleC)))/2, initY - (lineB * Math.sin(dtr(angleC)))/2);
}
</p>

<p>
function drawLineC () {
    ctx.font="20px Verdana";
    ctx.fillText(ansC, initX + (lineB * Math.cos(dtr(angleC))) + (((initX + lineA) - (initX + lineB * Math.cos(dtr(angleC)))) / 2) + 5,  initY - (lineB * Math.sin(dtr(angleC)))/2);
}
</p>

<p>
function drawA () {
    ctx.font="20px Verdana";
    ctx.fillText('a', initX + lineA / 2 - 15, initY + 20);
}
</p>

<p>
function drawB () {
    ctx.font="20px Verdana";
    ctx.fillText('b', initX - 30 + (lineB * Math.cos(dtr(angleC)))/2, initY - (lineB * Math.sin(dtr(angleC)))/2);
}
</p>

<p>
function drawC () {
    ctx.font="20px Verdana";
    ctx.fillText('c', initX + (lineB * Math.cos(dtr(angleC))) + (((initX + lineA) - (initX + lineB * Math.cos(dtr(angleC)))) / 2) + 5,  initY - (lineB * Math.sin(dtr(angleC)))/2);
}
</p>

<p>
function checkAnswer () {
    userAns = parseInt(document.getElementById('answer').value);
    if (userAns == checkAns) {
        alert("You are right!");
        if (wrong != 1) {
            pointCounter += 1;
	          localStorage.setItem('pointCounter', pointCounter); //update points and save
            drawTriangle();
        } else {
            drawTriangle();
            wrong = 0;
        }
    } else {
        alert("You were wrong, try again");
        wrong = 1; //don't give them points when they got it wrong, but let them keep trying
    }
    document.getElementById('answer').value = "";
    document.getElementById('answer').blur();
}
</p>

<p>
drawTriangle();    //initially draw triangle when site is loaded
</p>
</div>
</div>
<script src="http://cdn.jsdelivr.net/reveal.js/3.0.0/lib/js/head.min.js"></script>
<script src="http://cdn.jsdelivr.net/reveal.js/3.0.0/js/reveal.js"></script>

<script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

controls: true,
progress: true,
history: false,
center: true,
slideNumber: 'c',
rollingLinks: false,
keyboard: true,
overview: true,
width: 1200,
height: 800,
margin: 0.20,
minScale: 0.50,
maxScale: 2.50,

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none
transitionSpeed: 'default',
multiplex: {
    secret: '', // null if client
    id: '', // id, obtained from socket.io server
    url: '' // Location of socket.io server
},

// Optional libraries used to extend on reveal.js
dependencies: [
 { src: 'http://cdn.jsdelivr.net/reveal.js/3.0.0/lib/js/classList.js', condition: function() { return !document.body.classList; } },
 { src: 'http://cdn.jsdelivr.net/reveal.js/3.0.0/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: 'http://cdn.jsdelivr.net/reveal.js/3.0.0/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: 'http://cdn.jsdelivr.net/reveal.js/3.0.0/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
 { src: 'http://cdn.jsdelivr.net/reveal.js/3.0.0/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }]
});
</script>
</body>
</html>
